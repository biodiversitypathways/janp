---
title: "Report on the use of passive acoustic monitoring for analysis of bird trends in Jasper National Park"
format:
  html:
    grid:
      margin-width: 300px
navbar: right
theme: cosmo
date: "`r format(Sys.time(), '%d %B, %Y')`"
author: 
  - name: "Alex MacPhail"
    affiliation: "Biodiversity Pathways Ltd."
  - name: "Brenda Shepherd"
    affiliation: "Jasper National Park, Parks Canada"
  - name: "Nina Veselka"
    affiliation: "Jasper National Park, Parks Canada"
editor: visual
bibliography: references.bib
nocite: '@*'
toc: true
toc-depth: 3
toc-expand: true
prefer-html: true
toc-location: left
styles: styles.css
github: https://github.com/biodiversitypathways/janp
---

![](janp.png){style="float:left`;" fig-alt="Photo of Jasper" fig-align="center"}

```{r}
#| label: Load packages and authenticate to WildTrax
#| include: false
#| echo: false
#| eval: true
#| warning: false
#| message: false

library(tidyverse)
library(leaflet)
library(wildrtrax)
library(sf)
library(ggridges)
library(scales)
library(kableExtra)
library(ggrepel)
library(DT)
library(lubridate)
library(vegan)
library(lme4)
library(modifiedmk)
library(FD)
library(detect)
library(segmented)

wt_auth()

load('janp.RData')
#save.image('janp.RData')
```

```{r}
#| label: Download data from WildTrax
#| warning: false
#| message: false
#| echo: false
#| eval: false
#| include: true

janp_aru_projects <- wildrtrax::wt_get_projects(sensor = 'ARU') |>
  filter(grepl('Jasper National Park', project)) |>
  dplyr::select(project_id) |>
  pull()

# All projects associated with a single-visit ARU deployment with no abundance cap
janp_0max <- wildrtrax::wt_get_projects(sensor = 'ARU') |>
  filter(grepl('Jasper NP - EI', project)) |>
  filter(!grepl('2021|2022',project)) |>
  dplyr::select(project_id) |>
  pull()

# All projects associated with a single-visit ARU deployment with an abundance cap of 3
janp_3max <- wildrtrax::wt_get_projects(sensor = 'ARU') |>
  filter(grepl('Jasper NP - EI', project)) |>
  filter(grepl('2021|2022',project)) |>
  dplyr::select(project_id) |>
  pull()

janp_project_lists <- list(
  multi_day = janp_aru_projects,
  single_visit_0_max = janp_0max,
  single_visit_3_max = janp_3max
)

janp_aru <- imap_dfr(
  janp_project_lists,
  ~ map_dfr(
      .x, 
      ~ wildrtrax::wt_download_report(
          project_id = .x,
          sensor_id = "ARU",
          weather_cols = TRUE,
          reports = "main"
        )
    ) |> mutate(data_type = .y, .after = organization) 
)

# Mountain Pine Beetle
mpb <- wildrtrax::wt_download_report(project_id = 2129, sensor_id = "ARU", weather_cols = TRUE, reports = "main")

janp_aru <- read_csv("./main_temp.csv")

# Bind legacy data with acoustic data
janp_main <- bind_rows(old_s_max, janp_aru) |>
  group_by(location) |>
  fill(ecoregion, .direction = "down") |>
  ungroup() |>
  mutate(year = year(recording_date_time)) # Get year in as a variable

```

# Abstract

Since 2007, Jasper National Park has conducted passive acoustic monitoring as part of its ecological integrity monitoring program. The 17 years of data were analyzed to identify trends and extract insights that inform ongoing monitoring and strengthen future species monitoring practices. The analysis assessed whether species and guild abundances shifted by ±2.5% in the alpine and montane ecoregions. Data were managed and processed in WildTrax, combining and harmonizing legacy datasets from multiple methodologies. Sampling locations were tested for independence, and trend analyses quantified changes in species counts over time across guilds and ecoregions.

::: {.callout-note collapse="true" style="background-color: #f4f4f4; padding: 20px;"}
This report is dynamically generated, meaning its results may evolve with the addition of new data or further analyses. For the most recent updates, refer to the publication date and feel free to reach out to the authors.
:::

# Land Acknowledgement

We respectfully acknowledge that Jasper National Park is located in Treaty 6 and 8 as well as the traditional lands of the Anishinabe, Aseniwuche Winewak, Dene-zaa, Nêhiyawak, Secwépemc, Stoney Nakoda, Mountain Métis and Métis. We acknowledge the past, present, and future generations of these nations who continue to steward the land.

# Introduction

Human activities have been identified as key pressures and contributors to the global decline in forest wildlife (@allan2017recent). The repercussions of habitat fragmentation (@fahrig2003effects) and loss (@hanski2011habitat), climate change (@mantyka2012interactions, @sattar2021review, @abrahms2023climate), and increased access to sensitive areas exert direct and indirect pressures on forest biodiversity, particularly in managed regions in Canada (@lemieux2011state). Climate change and increasing wildfire activity in Alberta's Rocky Mountain Natural Region have significantly impacted montane bird monitoring; in 2023, two of the park's three long-term montane monitoring transects were affected by wildfires, while the third is currently undergoing wildfire risk reduction measures. Since 2007, Jasper National Park initiated a program incorporating passive acoustic monitoring of the Park's vocalizing wildlife. ARUs are compact environmental sensors that are designed to passively record the environment (@aru-overview), capturing vocalizing species like birds and amphibians, which is growing in use across the globe (@lots-of-pam). This technology enables resource managers to conduct prolonged surveys with minimal human interference, but also to create a permanent, archiveable recording of the soundscape. The subsequent data collected by these units contribute valuable information to ecological integrity metrics such as species richness, diversity, occupancy, and trends of species and human activities in National Parks over time. This data can aid in decision-making and management within the Park. Given the rapid and ease of accumulating data from these units, maintaining a high standard of data integrity is paramount to ensure future data interoperability and sharing.

This project aims to analyze Jasper’s passive acoustic monitoring data from 2007 to 2024, assessing trends in species and guild abundance while accounting for the clustering of survey points within transects. Separate analyses will be conducted for montane and sub-alpine and alpine ecoregions to align with Ecological Integrity reporting requirements, determining time-to-first-detection usability in analysis. To enhance accessibility and reproducibility, the findings will be presented in this online report with fully documented code, allowing future updates as data collection methods become standardized. Additionally, recommendations will be developed to refine data transcription priorities, improve annual reporting methods, and evaluate species guild classifications for long-term monitoring. The objectives of this report are to:

-   Describe the data management and processing procedures for the acoustic data collected from 2007 to 2024;
-   Comparing data processing methods on count of species and individuals heard on recordings;
-   Report on transects in montane/sub-alpine and alpine ecoregions, including time-to-first-detection where possible, with key metrics such as the percentage of bird species and guilds declining by ≥2.5% in both montane/sub-alpine and alpine regions.
-   Recommendations for prioritizing previous years’ data for re-transcription to 1SPT, determine the best approach for annual reporting, e.g. baseline comparisons or 10-year trend assessments, adjust methods for evaluating species trends against thresholds, and review guilds and traits used in assessments
-   Facilitate data publication to the public, resource managers, academic institutions, and any other relevant agencies

# Methods

## Data collection

Songbird data was collected using autonomous recording units (ARUs), deployed by field staff to capture one 10-minute recordings per point count annually. Surveys were scheduled consistently each breeding season in June and early July, starting at dawn. Technicians walked transects containing ten points, each spaced at least 300 m apart to prevent duplicate detections and ensure independence of locations. At each location, the ARU is set up, and technicians move 10–20 m away to minimize disturbance, allowing at least 11 minutes of recording for voice notes and activation and de-activation of the units.

```{r}
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| include: true
#| fig-align: center
#| fig-cap: Locations from Jasper National Park ARU Monitoring Program. Includes acoustic monitoring locations for other collaborative projects. Ecoregions were not classified for Other sites but only EI Monitoring locations.
#| label: fig-aru-monitoring-locations

janp_locs <- janp_main |>
  dplyr::select(location, latitude, longitude, year, ecoregion) |>
  drop_na(latitude) |>
  distinct() |>
  dplyr::mutate(type = case_when(grepl('BAT', location) ~ "Bat", TRUE ~ "Bird")) |>
  sf::st_as_sf(coords = c("longitude", "latitude"), crs = 4326)

# Create mpb_in_janp
mpb_sf <- mpb |>
  mutate(year = year(recording_date_time)) |>
  dplyr::select(location, year, latitude, longitude) |>
  distinct() |>
  drop_na(latitude, longitude) |>
  sf::st_as_sf(coords = c("longitude", "latitude"), crs = 4326)
mpb_in_janp <- st_intersection(mpb_sf, janp_shp)

# Combine
janp_locs_map <- janp_locs |> 
  #bind_rows(mpb_in_janp) |>
  dplyr::select(location, year, ecoregion, geometry) |>
  mutate(ecoregion = case_when(
    grepl("^JANP", location) ~ "Other ARU Monitoring", 
    grepl("MPB", location) ~ "Mountain Pine Beetle Project", 
    TRUE ~ ecoregion
  )) |>
  filter(!grepl('MPB',location))

# Generate summary table
locs_summary <- janp_locs_map |>
  st_drop_geometry() |>
  group_by(location, ecoregion, year) |>
  distinct() |>
  mutate(value = row_number()) |>
  ungroup() |>
  arrange(year) |>
  pivot_wider(names_from = year, values_from = value, values_fill = 0) |>
  rename('Location' = location)

# Map visualization
pal <- colorFactor(
  palette = "Set3", 
  domain = janp_locs_map$ecoregion
)

leaflet() %>%
  addTiles() %>%
  addPolygons(
    data = janp_shp,
    color = "black",
    weight = 1,
    fillOpacity = 0.4,
    popup = ~paste("Park:", adminAreaN)
  ) %>%
  addCircleMarkers(
    data = janp_locs_map |> filter(!grepl('MPB',location)),
    popup = ~paste("Location:", location, "<br>"),
    fillColor = ~pal(ecoregion),  
    fillOpacity = 1,
    color = "black", 
    radius = 6 
  ) %>%
  addLegend(
    "topright",
    pal = pal,
    values = janp_locs_map$ecoregion,
    title = "Ecoregion",
    opacity = 1
  ) %>%
  addMeasure(primaryLengthUnit = "meters", primaryAreaUnit = "sqmeters") %>%
  addMiniMap(position = "bottomleft")

```

```{r}
#| warning: false
#| echo: true
#| eval: true
#| message: false
#| include: true
#| label: tbl-loc-summary
#| collapse: true
#| code-fold: true
#| tbl-cap: Locations surveyed across years. Ones indicated a deployment in that year for that location.

datatable(locs_summary, 
          options = list(
            searching = TRUE,  
            paging = TRUE,    
            pageLength = 10   
          )) |>
  formatStyle(columns = colnames(locs_summary), 
              backgroundColor = styleEqual(c("NA"), "lightgray"))  
```

## Data management, processing and quality control

Recordings were clipped and organized to only include the 10-minute count. Before adopting WildTrax in 2021, processing analysts excluded the initial 20 seconds to 1.5 minutes of recordings to reduce human impact on detection probability, then logged the first detection time per species. Recordings are now uploaded as clean 10-minute files with the voice note and observer notes removed. In WildTrax, individuals were counted by users scanning both the spectrogram and listening to the audio output. Tags were then drawn to encompass the signal within the methods indicated in each project (see @tbl-transcriptions and @fig-acousticprocessing). Transcribers also had site photos available (see @fig-visitphotos) to optimize their species identification by having habitat context while processing.

```{r}
#| warning: false
#| echo: true
#| eval: true
#| message: false
#| include: true
#| label: tbl-transcriptions
#| collapse: true
#| code-fold: true
#| tbl-cap: Transcription method by year with re-transcribed data being conducted from 2007 - 2024.

transcription_table <- tibble(
  Years = c("2007-2020", "2021-2022", "2023-2024", "2007-2011"),
  `Transcription Method` = c(
    "0-3.33, 3.33-6.66, 6.66-10 min",
    "1 SPT - Species per task or recording (Every new individual is tagged within the 10 minute recording).",
    "1 SPT - Species per task or recording (Every new individual is tagged within the 10 minute recording).",
    "1 SPT - Species per task or recording (Every new individual is tagged within the 10 minute recording). Re-transcription."
  ),
  `Bin Method` = c(
    "Abundance re-starts for each 3.33-minute bin",
    "Time of first detection over 10 minute period",
    "Time of first detection over 10 minute period",
    "Time of first detection over 10 minute period. Re-transcription."
  ),
  `Method Details` = c(
    "No cap on abundance; abundance re-starts for each bin, no total abundance for the 10-min recording",
    "Time of first detection over 10 minute period",
    "Time of first detection over 10 minute period",
    "Time of first detection over 10 minute period. Re-transcription."
  ),
  `Max # of Individuals` = c(
    "No cap",
    "Maximum of 3 individuals per 10-minute recording",
    "No cap",
    "No cap. Re-transcription."
  )
)

transcription_table


# Render the datatable
datatable(transcription_table, 
          options = list(
            searching = TRUE,  
            paging = TRUE,    
            pageLength = 10   
          )) |>
  formatStyle(columns = colnames(transcription_table), 
              backgroundColor = styleEqual(c("NA"), "lightgray"))  


```

![WildTrax Acoustic Processing Interface (Version 2)](acousticprocessing.png){#fig-acousticprocessing .float-left .fig-align-center}

```{r}
#| warning: false
#| echo: false
#| message: false
#| eval: true
#| include: true
#| label: tbl-verified
#| tbl-cap: Proportion of tags verified. NA evaluated tags were from legacy acoustic data, not including re-transcriptions for method comparison in WildTrax.

all_tags <- janp_main |>
  tally() |>
  pull()

verified_tags <- janp_main |>
  group_by(tag_is_verified) |>
  tally() |>
  ungroup() |>
  mutate(Proportion = round(n / all_tags,4)*100) |>
  rename("Count" = n) |>
  rename("Tag is verified" = tag_is_verified)

#kable(verified_tags)

```

```{r}
#| warning: false
#| echo: false
#| message: false
#| eval: true
#| include: true
#| label: tbl-tmtt
#| tbl-cap: Too many to count (TMTT) tags in WildTrax

tmtt_tags <- janp_main |>
  dplyr::select(location, recording_date_time, species_code, individual_count) |>
  distinct() |>
  filter(individual_count == "TMTT") |>
  mutate(recording_date_time = format(recording_date_time, "%Y-%m-%d %H:%M:%S"))

```

![Visit photos at CAVELL-3](locationphotos.png){#fig-visitphotos .float-left .fig-align-center}

## Analyses

::: {.callout-note collapse="true" style="background-color: #f4f4f4; padding: 20px;"}
For the purpose of these analyses abundance was defined as the count of individuals detected during point counts, rather than as a density x area relationship. All analyses took place in R 4.5.1 'Great Square Root'.
:::

### Location correlation {#sec-location-correction}

To assess spatial autocorrelation among bird survey locations across years, we examined the spatial relationship between survey points based on total species abundance per location and year in order to determine whether spatial clustering or spatial dependence exists in the species abundance data. Given that survey points are typically 300 meters apart, we used the `knearneigh()` function to identify the nearest neighbours within this threshold. This function calculates the closest neighboring survey points for each location. We then constructed a spatial weight matrix using the `knn2nb()` function and calculated Moran's *I* statistic using `moran.test` to determine whether spatial autocorrelation exists in the abundance of species across survey locations. A significant Moran's *I* suggests that survey locations are not independent and that spatial autocorrelation should be accounted for in further analyses. We also conducted further analyses grouping locations from each transect (`r paste(unique(janp_transects$transect_name), collapse = ", ")`).

```{r}
#| warning: false
#| echo: false
#| message: false
#| eval: false
#| include: true
#| code-fold: true

# Create an object that defines the EI transects
janp_transects <- janp_main |>
  filter(!grepl('^JANP|^MPB',location)) |>
  filter(data_type %in% c("legacy","single_visit_3_max","single_visit_0_max")) |>
  filter(!(data_type == "single_visit_0_max" & year < 2023)) |>
  wt_tidy_species(remove = c("mammal","amphibian","abiotic","insect","unknown"), zerofill = F) |>
  dplyr::select(location) |>
  distinct() |>
  separate(location, into = c("transect_name", "station_id"), remove = FALSE)

```

```{r}
#| warning: false
#| echo: false
#| message: false
#| eval: false
#| include: true
#| code-fold: true

janp_total_count <- janp_main %>%
  wt_tidy_species(remove = c("mammal","amphibian","abiotic","insect","unknown"), zerofill = T) |>
  wt_replace_tmtt(calc = "round") |>
  group_by(location, year, species_code) %>%
  summarise(n = max(individual_order, na.rm = TRUE), .groups = "drop") %>%
  group_by(location, year) %>%
  summarise(n = sum(n, na.rm = TRUE), .groups = "drop")

janp_locs_sf <- janp_locs %>%
  distinct(location, ecoregion, geometry) %>%
  inner_join(janp_total_count, by = "location") %>%
  st_as_sf()

janp_locs_sf <- janp_locs_sf %>%
  mutate(n = as.numeric(n)) %>%
  filter(!is.na(n))

coords <- st_coordinates(janp_locs_sf)
neighbours <- knn2nb(knearneigh(coords, k = 1, longlat = TRUE))
weights <- nb2listw(neighbours, style = "W", zero.policy = TRUE)
moran_test <- moran.test(janp_locs_sf$n, listw = weights, zero.policy = TRUE)
```

```{r}
#| warning: false
#| echo: false
#| message: false
#| eval: false
#| include: false

moran_test

```

### Community analysis

A redundancy analysis (RDA) was conducted using the `vegan` package (@vegan2025) to quantify the variation in community composition explained by ecoregions and to visualize species–ecoregion relationships with ordination plots (@Rao1964). Species‑level observations were aggregated into a species‑by‑location matrix, with abundances recorded as the maximum count of each species at each location. Ecoregions were categorized into Alpine and Montane with the Montaine ecoregions that can be further sub-divided into Upper Subalpine, Lower Subalpine, and Montane proper ecozones for all subsequent analyses. Differences in composition between Alpine and Montane groups were tested using permutational multivariate analysis of variance (PERMANOVA; @Anderson2001) on Bray–Curtis dissimilarities with 999 permutations under a reduced model.

### Trend analysis

We analyzed bird abundance trends from 2007 to 2024 across species, ecoregions, and functional guilds. This multi-level approach allowed us to assess patterns of change while considering ecological and functional groupings. Observations were first filtered to include only data from the EI monitoring sites containing ecoregional classification. Species were classified into functional guilds using an ecological trait database (see @tbl-guilds). Spatial autocorrelation was accounted for when considered sites grouped <100 meters from one another across years based on the results of the Moran's *I* test. Given transcription methods varied over time (see @tbl-transcriptions), which may possibly affect data consistency, from both a species detectability and methodological standpoint, we used generalized linear mixed models (GLMM) using the `lme4` with package (@bates2015parsimonious) to examine time-to-first detection of each individual and the differences it posed across years to account for detection probability differences, using location as random effect (`1 | location`). 20 species (`r paste(mdm, collapse = ", ")`) that were the most abundant and represented different guilds were used for the analyses. Count data were modeled with a Poisson distribution or a negative binomial distribution when overdispersion was detected, with `year` and `method` (i.e., processing methodology) as fixed effects and `location` as a random effect.

To evaluate trend significance, we applied the Mann–Kendall test (@mann1945non; @hamed1998), a non-parametric method sensitive to monotonic trends (@birds6010014), and estimated trend magnitude using Sen’s Slope (@Sen01121968; @dawood2017spatio) via the `mmkh()` function in the `modifiedmk` package. Because these tests do not account for detection probability, we complemented them with single-visit abundance models (@solymos2012conditional) via the `svabu` function implemented in the `detect` package. `svabu` models estimate abundance while explicitly incorporating detection probability, providing more reliable inferences about true abundance trends. It also avoids the need to assume a closed population statistically and computationally efficient estimators. For each species, we fitted separate models for each ecoregion with year, julian date and time of day included as covariate in the abundance component (e.g., `svabu(individual ~ year | year + julian + hour)`). Year-specific mean abundance (λ̂) was then estimated across sites, and the resulting λ̂ series was analyzed using the Mann–Kendall test to assess temporal trends in detection-corrected abundance.

Functional diversity was quantified using Rao’s Q (@rao1982diversity; @laliberte2010adistance) via the dbFD() function in the FD package (@FDpackage). To assess temporal changes in guild-level trait diversity, we applied linear, mixed-effects, and segmented models. We also summarized raw species richness—the number of unique species—per location and plotted its change over time (@fig-spp-rich-locs), complemented by annual estimates of Shannon’s diversity index, which integrates both species richness and evenness, to capture broader shifts in community structure (@fig-shannon).

```{r}
#| warning: false
#| echo: true
#| eval: true
#| message: false
#| include: true
#| results: hide
#| code-fold: true

all_lambda <- list()
trend_summary <- list()

tot_abundance <- tot_a_filtered |>
  filter(!detection_time > 180) |>
  mutate(julian = yday(recording_date_time),
         hour = hour(recording_date_time)) |> 
  filter(species_code %in% mdm)

for (sp in unique(tot_abundance$species_code)) {
  for (ec in unique(tot_abundance$ecoregion)) {
    simp <- tot_abundance %>%
      filter(species_code == sp, ecoregion == ec)
    
    if (nrow(simp) < 5) next
    
    fit <- svabu(individual_order ~ year | year + julian, data = simp)

    mean_julian <- mean(simp$julian, na.rm = TRUE)
    
    pred_grid <- expand.grid(year = unique(simp$year), julian = mean_julian)
    pred_grid$lambda <- predict(fit, newdata = pred_grid, type = "response")
    
    lambda_year <- pred_grid %>%
      group_by(year) %>%
      summarise(lambda_hat = mean(lambda)) %>%
      mutate(species_code = sp, ecoregion = ec)
    
    all_lambda[[paste(sp, ec, sep = "_")]] <- lambda_year
    
    # Mann–Kendall test on λ̂
    mk <- try(mmkh(lambda_year$lambda_hat), silent = TRUE)
    
    if (!inherits(mk, "try-error")) {
      trend_summary[[paste(sp, ec, sep = "_")]] <- tibble(
        species_code = sp,
        ecoregion = ec,
        tau = mk[["Tau"]],
        p_value = mk[["new P-value"]],
        sen_slope = mk[["Sen's slope"]]
      )
    }
  }
}

lambda_all <- bind_rows(all_lambda)
trend_all <- bind_rows(trend_summary)

trend_alls <- trend_all %>%
  mutate(
    perc_change = sen_slope / mean(lambda_all$lambda_hat[lambda_all$species_code == species_code & lambda_all$ecoregion == ecoregion]) * 100,
    trend_flag = case_when(
      perc_change >= 2.5 ~ "Increase > 2.5%",
      perc_change <= -2.5 ~ "Decrease > 2.5%",
      TRUE ~ "Stable"
    )
  )
```


```{r}
#| warning: false
#| echo: true
#| eval: true
#| message: false
#| include: true
#| label: tbl-guilds
#| collapse: true
#| code-fold: true
#| tbl-cap: Guilds

guilds <- read_csv("jasper_guilds.csv")

guild_activity <- janp_main |>
  filter(data_type %in% c("legacy", "single_visit_3_max", "single_visit_0_max")) |>
  filter(!(data_type == "single_visit_0_max" & year < 2023)) |>
  wt_tidy_species(remove = c("mammal", "amphibian", "abiotic", "insect", "unknown"), zerofill = T) |>
  dplyr::select(location, recording_date_time, species_common_name, species_code, individual_count) |>
  mutate(julian = lubridate::yday(recording_date_time),
         month = month(recording_date_time),
         year = factor(year(recording_date_time))) |>
  inner_join(guilds, by = "species_code") |>
  group_by(species_code) |>
  add_tally() |>
  ungroup() |>
  group_by(julian, species_code) |>
  add_tally() |>
  ungroup() |>
  arrange(species_code) |>
  mutate(recording_date_time = as.POSIXct(recording_date_time)) |>
  mutate(species_code = factor(species_code, levels = sort(unique(species_code)))) |>
  inner_join(locs_summary, by = c("location" = "Location")) |>
  mutate(ecoregion = case_when(ecoregion %in% c("Alpine") ~ "Alpine",
                               ecoregion %in% c("Upper Subalpine", "Lower Subalpine", "Montane") ~ "Montane"))

datatable(guilds, 
          options = list(
            searching = TRUE,  
            paging = TRUE,    
            pageLength = 10   
          ))

```

```{r}
#| warning: false
#| echo: false
#| eval: true
#| message: false
#| include: true
#| code-fold: true

abund_sp <- janp_main %>%
  group_by(location, year, species_code) %>%
  summarise(abund = n(), .groups = "drop") %>%
  pivot_wider(id_cols = c(location, year),
              names_from  = species_code,
              values_from = abund,
              values_fill = 0)

trait_df <- guilds %>%
  dplyr::select(species_code, dietary_guild, habitat_guild, migratory_guild) %>%
  distinct() %>%
  column_to_rownames("species_code")

trait_mat <- model.matrix(~ dietary_guild + habitat_guild + migratory_guild - 1,
                          data = trait_df)

a_mat <- abund_sp %>% dplyr::select(-location, -year) %>% as.matrix()

common <- intersect(colnames(a_mat), rownames(trait_mat))
a_mat2     <- a_mat[, common, drop = FALSE]
trait_mat2 <- trait_mat[common, , drop = FALSE]

nonzero   <- rowSums(a_mat2) > 0
a_mat3    <- a_mat2[nonzero, , drop = FALSE]
sites3    <- abund_sp[nonzero, c("location","year")]

fd <- dbFD(x = trait_mat2, a = a_mat3, calc.FRic = TRUE, calc.CWM = FALSE, messages = FALSE)

loc_year_rao <- sites3 %>%
  mutate(RaoQ = fd$RaoQ)

yearly_rao <- loc_year_rao %>%
  group_by(year) %>%
  summarise(meanRao = mean(RaoQ), .groups = "drop")

mk        <- mmkh(yearly_rao$meanRao, ci = 0.95)
lm_trend  <- lm(meanRao ~ year, data = yearly_rao)
mix_trend <- lmer(RaoQ ~ year + (1|location), data = loc_year_rao)
seg       <- segmented(lm(meanRao ~ year, data = yearly_rao), seg.Z = ~ year)

yearly_rao <- yearly_rao |>
  mutate(
    lm_fit = predict(lm_trend, newdata = yearly_rao),
    mix_fit = predict(mix_trend, newdata = yearly_rao, re.form = NA),
    seg_fit = predict(seg, newdata = yearly_rao)
  )

```

```{r}
#| warning: false
#| echo: true
#| eval: true
#| message: false
#| include: true
#| results: hide
#| code-fold: true

shannon_d <- janp_main |> 
  wt_tidy_species(remove = c("mammal","amphibian","abiotic","insect","unknown"), zerofill = F) |>
  inner_join(wt_get_species() |> dplyr::select(species_code, species_class, species_order), by = "species_code") |>
  dplyr::select(location, recording_date_time, species_code, species_common_name, individual_order, individual_count) |>
  distinct() |>
  group_by(location, recording_date_time, species_code, species_common_name) |>
  summarise(count = max(individual_order)) |>
  ungroup() |>
  pivot_wider(names_from = species_code, values_from = count, values_fill = 0) |>
  pivot_longer(cols = -(location:species_common_name), names_to = "species", values_to = "count") |>
  group_by(location, year = year(recording_date_time), species) |>
  summarise(total_count = sum(count)) |>
  ungroup() |>
  group_by(location, year) |>
  summarise(shannon_index = diversity(total_count, index = "shannon")) |>
  ungroup() |>
  ggplot(aes(x = factor(year), y = shannon_index, fill = factor(year))) +
  geom_boxplot() +
  geom_point(alpha = 0.6, colour = "grey") +
  labs(x = "Year",
       y = "Shannon diversity index per location") +
  theme_bw() +
  guides(fill = guide_legend(title = "Year")) +
  scale_fill_viridis_d(alpha = 0.8, option = "cividis")
```

# Results

::: {.callout-note collapse="true" style="background-color: #f4f4f4; padding: 20px;"}
Some of these analyses are still a work-in-progress. Check back soon for updates and additional details.
:::

## Ecoregions

@fig-community shows the relationship between species and ecoregion. The PERMANOVA test was performed using Bray-Curtis dissimilarity to assess whether community composition significantly differed between ecoregion groups. The analysis revealed a significant difference in community composition between alpine and montane groups. The ecoregion grouping explained approximately 27.85% of the variation in community composition, while residual variation accounted for 72.15%. These findings indicate a substantial divergence in species composition between ecoregion groups and helps to justify subsequent analyses looking at trend differences between these areas.

```{r}
#| warning: false
#| echo: false
#| message: false
#| eval: true
#| include: true
#| label: fig-community
#| tbl-cap: Community matrix

comm_matrix <- janp_main |>
  wt_tidy_species(remove = c("mammal","amphibian","abiotic","insect","unknown"), zerofill = T) |>
  wt_replace_tmtt(calc = "round") |>
  dplyr::select(-ecoregion) |>
  inner_join(locs_summary, by = c("location" = "Location")) |>
  mutate(ecoregion = case_when(ecoregion %in% c("Alpine") ~ "Alpine",
                               ecoregion %in% c("Upper Subalpine","Lower Subalpine","Montane") ~ "Montane")) |>
  group_by(location, ecoregion, species_code) |>
  summarise(individual_order = max(individual_order)) |>
  ungroup() |>
  pivot_wider(names_from = species_code, values_from = individual_order, values_fill = 0) |>
  drop_na(ecoregion)

multi_type <- comm_matrix  %>%
  dplyr::select(location, ecoregion) %>%
  distinct() %>%
  drop_na()

t3 <- rda(comm_matrix[,-c(1:2)] ~ ecoregion + location, data = multi_type)
t3scores <- scores(t3, display = "sites") %>%
as.data.frame() %>%
rownames_to_column("site") %>%
bind_cols(., multi_type)
t3vect <- scores(t3, display = "species") %>%
as.data.frame()

plot_RDA <- ggplot(data = t3scores, aes(x = RDA1, y = RDA2)) +
  geom_point(data = t3scores, aes(x = RDA1, y = RDA2, colour = ecoregion), 
             alpha = 0.7, size = 3, shape = 16) +
  stat_ellipse(data = t3scores, aes(colour = ecoregion), 
               linetype = 1, type = 'norm', level = 0.67, size = 1) +
  geom_vline(xintercept = 0, color = "#A19E99", linetype = 2, size = 1) +
  geom_hline(yintercept = 0, color = "#A19E99", linetype = 2, size = 1) +
  geom_segment(data = t3vect, aes(x = 0, y = 0, xend = RDA1, yend = RDA2), 
               arrow = arrow(length = unit(0.2, "cm")), size = 0.3) +
  geom_text_repel(data = t3vect, aes(x = RDA1, y = RDA2, label = rownames(t3vect)), 
                  size = 3, colour = "black", fontface = "italic", 
                  max.overlaps = 10, 
                  segment.color = "grey70") +
  theme_bw() +
  scale_colour_viridis_d(option = "cividis", end = 0.9) +
  labs(x = "RDA1", y = "RDA2", title = "Species-ecoregion associations", 
       colour = "Ecoregion") +
  theme(legend.position = "right", 
        legend.title = element_text(size = 10), 
        legend.text = element_text(size = 9), 
        plot.title = element_text(hjust = 0.5, size = 14, face = "bold"))

plot_RDA
```

```{r}
#| warning: false
#| echo: false
#| message: false
#| eval: true
#| include: true
#| label: permanova
#| tbl-cap: PERMANOVA test

comm_matrix_data <- comm_matrix[, -c(1:2)] # Exclude location and ecoregion columns
ecoregion_group <- comm_matrix$ecoregion

# Perform PERMANOVA
permanova_result <- adonis2(comm_matrix_data ~ ecoregion_group, data = comm_matrix, method = "bray", permutations = 999)

```

## Species richness and functional diversity

Activity patterns across nesting, dietary and migratory guilds are illustrated in @fig-spp-nesting onwards. A notable pattern emerges across all four guilds of the proportion of tags detected being detected later in the alpine ecoregion compared to the montane ecoregion. Species richness per location is at @fig-spp-rich-locs and Shannon's diversity index over years at @fig-shannon. Overall, both richness and diversity were stable across years. Rao’s Q averaged between about 8.2 and 10.5 across survey locations, with a clear upward tendency over time (@fig-raos-q). The non‑parametric Mann–Kendall test gave a Kendall’s τ of 0.32 (p ≈ 0.07), indicating a positive but marginally non‑significant monotonic increase in functional diversity. A simple linear regression of mean Rao’s Q against year yielded a slope of 0.051 units per year (p ≈ 0.06), again suggesting an upward trend that narrowly misses the conventional 0.05 significance threshold. When we account for repeated measures at each location via a mixed‑effects model (random intercepts by location), the year effect becomes highly significant (slope = 0.058 Rao’s Q units per year; t ≈ 4.3), demonstrating that functional diversity has increases when location‑level variation is considered. Finally, breakpoint analysis identifies a shift around 2009, suggesting that functional diversity was relatively low and stable from 2007–2009, then rose to more variable but generally higher values from 2010 onward.

```{r}
#| warning: false
#| echo: false
#| eval: true
#| message: false
#| include: true
#| results: hide
#| fig-align: center
#| fig-cap: Seasonal detection activity of by nesting guild and ecoregion
#| label: fig-spp-activity-nesting
#| cap-location: margin
#| code-fold: true

ggplot(guild_activity, aes(x = julian, y = habitat_guild, fill = habitat_guild)) + 
      geom_density_ridges(alpha = 0.7) +
      scale_fill_viridis_d(option = "cividis") +
      facet_wrap(~ecoregion) +
      theme_bw() +
      xlab("Day of Year") + 
      ylab("Species")

```

```{r}
#| warning: false
#| echo: false
#| eval: true
#| message: false
#| include: true
#| results: hide
#| fig-align: center
#| fig-cap: Seasonal detection activity of by migratory guild and ecoregion
#| label: fig-spp-activity-migratory
#| cap-location: margin
#| code-fold: true

ggplot(guild_activity, aes(x = julian, y = migratory_guild, fill = migratory_guild)) + 
      geom_density_ridges(alpha = 0.7) +
      scale_fill_viridis_d(option = "cividis") +
      facet_wrap(~ecoregion) +
      theme_bw() +
      xlab("Day of Year") + 
      ylab("Species")

```

```{r}
#| warning: false
#| echo: false
#| eval: true
#| message: false
#| include: true
#| results: hide
#| fig-align: center
#| fig-cap: Seasonal detection activity of by trait and ecoregion
#| label: fig-spp-activity-trait
#| cap-location: margin
#| code-fold: true

ggplot(guild_activity |> filter(!is.na(trait)), aes(x = julian, y = trait, fill = trait)) + 
      geom_density_ridges(alpha = 0.7) +
      scale_fill_viridis_d(option = "cividis") +
      facet_wrap(~ecoregion) +
      theme_bw() +
      xlab("Day of Year") + 
      ylab("Species")

```

```{r}
#| warning: false
#| echo: false
#| eval: true
#| message: false
#| include: true
#| results: hide
#| fig-align: center
#| fig-cap: Seasonal detection activity of by dietary guild and ecoregion
#| label: fig-spp-activity-dietary
#| cap-location: margin
#| code-fold: true

ggplot(guild_activity, aes(x = julian, y = dietary_guild, fill = dietary_guild)) + 
      geom_density_ridges(alpha = 0.7) +
      scale_fill_viridis_d(option = "cividis") +
      facet_wrap(~ecoregion) +
      theme_bw() +
      xlab("Day of Year") + 
      ylab("Species")

```

```{r}
#| warning: false
#| echo: false
#| eval: true
#| message: false
#| include: true
#| results: hide
#| fig-align: center
#| fig-cap: Mean functional diversity (Rao's Q) over time
#| label: fig-raos-q
#| cap-location: margin
#| code-fold: true

ggplot(yearly_rao, aes(x = year, y = meanRao)) +
  geom_point(color = "#213b6e", size = 2) +  # Points for yearly Rao
  geom_line(aes(y = lm_fit, color = "Linear Model"), size = 1.2, linetype = "dashed") +
  geom_line(aes(y = mix_fit, color = "Mixed Effects"), size = 1.2, linetype = "dotted") +
  geom_line(aes(y = seg_fit, color = "Segmented Trend"), size = 1.2) +  # Segmented trend
  scale_color_manual(values = c("Linear Model" = "#b1a570", 
                                "Mixed Effects" = "#6c6e72", 
                                "Segmented Trend" = "#d9c55c")) +  # Custom color mapping
  labs(
    x = "Year",
    y = "Mean Rao's Quadratic Entropy",
    color = "Trend Type"  # Legend title
  ) +
  theme_bw() +
  theme(
    plot.title = element_text(size = 16, face = "bold"),
    plot.subtitle = element_text(size = 12),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12)
  )

```

```{r}
#| warning: false
#| message: false
#| echo: false
#| eval: false
#| include: false
#| code-fold: true

res_raos_q

```

```{r}
#| warning: false
#| message: false
#| echo: true
#| eval: true
#| include: true
#| fig-align: center
#| fig-cap: Species richness by year
#| label: fig-spp-rich-locs
#| cap-location: bottom
#| code-fold: true

spp_rich_location <- janp_main |>
  filter(data_type %in% c("legacy","single_visit_3_max","single_visit_0_max")) |>
  filter(!(data_type == "single_visit_0_max" & year < 2023)) |>
  wt_tidy_species(remove = c("mammal","amphibian","abiotic","insect","unknown"), zerofill = F) |>
  dplyr::select(location, year, species_code) |>
  distinct() |>
  group_by(location, year) |>
  summarise(species_count = n_distinct(species_code)) |>
  ungroup() |>
  inner_join(locs_summary, by = c("location" = "Location")) |>
  mutate(ecoregion = case_when(ecoregion %in% c("Alpine") ~ "Alpine",
                               ecoregion %in% c("Upper Subalpine","Lower Subalpine","Montane") ~ "Montane"))

spp_rich_location |>
  ggplot(aes(x=as.factor(year), y=species_count, fill=year)) +
  geom_boxplot() +
  geom_point(alpha = 0.7, colour = "grey") +
  geom_smooth(method = "lm") +
  theme_bw() +
  facet_wrap(~ecoregion) +
  scale_fill_viridis_c(option = "cividis") +
  xlab('Year') + ylab('Species richness per location') +
  coord_flip()

```

```{r}
#| warning: false
#| echo: true
#| eval: true
#| message: false
#| include: true
#| results: hide
#| fig-align: center
#| fig-cap: Shannon diversity index over years
#| label: fig-shannon
#| cap-location: bottom
#| code-fold: true

shannon_d
```

## Abundance trends

```{r}
#| warning: false
#| echo: true
#| eval: true
#| message: false
#| include: true
#| results: hide
#| code-fold: true
#| fig-align: center
#| fig-width: 10
#| fig-height: 12
#| fig-cap: Estimated single-visit mean abundance trends per species and ecoregion
#| label: fig-abundance-trends
#| cap-location: bottom

# Plot abundance trends
ggplot(lambda_all, aes(x = year, y = lambda_hat, color = ecoregion)) +
  geom_line(size = 1.1) +
  facet_wrap(~species_code, scales = "free_y", ncol = 6) +
  ylim(0, 3) +
  labs(
    x = "Year",
    y = expression("Estimated Abundance (" * hat(lambda) * ")"),
    title = "Detection-Corrected Abundance Trends by Ecoregion"
  ) +
  theme_bw() +
  scale_colour_viridis_d(option = "cividis") +
  theme(strip.text = element_text(size = 8))

```

```{r}
#| warning: false
#| echo: true
#| eval: true
#| message: false
#| include: true
#| results: hide
#| code-fold: true

lambda_all %>%
  group_by(species_code) %>%
  summarise(
    mk_test = list(mmkh(lambda_hat))) |>
  ungroup() |>
  unnest_wider(mk_test) 

```

```{r}
#| warning: false
#| echo: true
#| eval: true
#| message: false
#| include: true
#| results: hide
#| code-fold: true
#| fig-align: center
#| fig-width: 10
#| fig-cap: Abundance trends with thresholds
#| label: fig-abundance-trends-thresholds
#| cap-location: bottom

mean_lambda <- lambda_all %>%
  group_by(species_code, ecoregion) %>%
  summarise(mean_lambda = mean(lambda_hat), .groups = "drop")

trend_alls <- trend_all %>%
  left_join(mean_lambda, by = c("species_code", "ecoregion")) %>%
  mutate(
    perc_change = sen_slope / mean_lambda * 100,
    trend_flag = case_when(
      perc_change >= 2.5 ~ "Increase > 2.5%",
      perc_change <= -2.5 ~ "Decrease > 2.5%",
      TRUE ~ "Stable"
    )
  )

lambda_all_flagged <- lambda_all %>%
  left_join(trend_alls %>% dplyr::select(species_code, ecoregion, trend_flag), 
            by = c("species_code", "ecoregion")) |>
arrange(species_code, year)

# Plot
ggplot(lambda_all_flagged, aes(x = year, y = lambda_hat, color = trend_flag)) +
  geom_point(data = tot_a_filtered %>% filter(species_code %in% mdm),
             aes(x = year, y = individual_order), alpha = 0.3, color = "gray") +
  geom_smooth(method = "lm", se = TRUE, size = 1.1) +  # straight line with confidence interval
  facet_wrap(~species_code, scales = "free_y") +
  scale_color_manual(values = c("Increase > 2.5%" = "blue",
                                "Decrease > 2.5%" = "red",
                                "Stable" = "black")) +
  labs(x = "Year", y = expression("Estimated Abundance ("*lambda*")"),
       color = "Trend Category",
       title = "Detection-Corrected Abundance Trends with ±2.5% Threshold") +
  theme_bw() +
  theme(legend.position = "bottom")

```

# Discussion and recommendations

