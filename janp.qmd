---
title: "Report on the use of passive acoustic monitoring for analysis of bird trends in Jasper National Park"
format:
  html:
    grid:
      margin-width: 300px
navbar: right
theme: cosmo
date: "`r format(Sys.time(), '%d %B, %Y')`"
author: 
  - name: "Alex MacPhail"
    affiliation: "Biodiversity Pathways Ltd."
  - name: "Brenda Shepherd"
    affiliation: "Parks Canada"
editor: visual
bibliography: references.bib
nocite: '@*'
toc: true
toc-depth: 3
toc-expand: true
toc-location: left
styles: styles.css
github: https://github.com/biodiversitypathways/janp
---

![](janp.png){style="float:left`;" fig-alt="Photo of Jasper" fig-align="center"}

```{r}
#| label: Load packages and authenticate to WildTrax
#| include: false
#| echo: false
#| eval: true
#| warning: false
#| message: false

library(tidyverse)
library(leaflet)
library(wildrtrax)
library(sf)
library(ggridges)
library(scales)
library(kableExtra)
library(plotly)
library(DT)
library(lubridate)
library(spdep)
library(vegan)
library(ggrepel)
library(broom)
library(lme4)
library(pwr)
library(ggeffects)
library(emmeans)

wt_auth()

load('janp.RData')
#save.image('janp.RData')
```

```{r}
#| label: Download data from WildTrax
#| warning: false
#| message: false
#| echo: false
#| eval: false
#| include: true

janp_aru_projects <- wildrtrax::wt_get_download_summary(sensor = 'ARU') |>
  filter(grepl('Jasper National Park', project)) |>
  select(project_id) |>
  pull()

# All projects associated with a single-visit ARU deployment with no abundance cap
janp_0max <- wildrtrax::wt_get_download_summary(sensor = 'ARU') |>
  filter(grepl('Jasper NP - EI', project)) |>
  filter(!grepl('2021|2022',project)) |>
  select(project_id) |>
  pull()

# All projects associated with a single-visit ARU deployment with an abundance cap of 3
janp_3max <- wildrtrax::wt_get_download_summary(sensor = 'ARU') |>
  filter(grepl('Jasper NP - EI', project)) |>
  filter(grepl('2021|2022',project)) |>
  select(project_id) |>
  pull()

janp_project_lists <- list(
  multi_day = janp_aru_projects,
  single_visit_0_max = janp_0max,
  single_visit_3_max = janp_3max
)

janp_aru <- imap_dfr(
  janp_project_lists,
  ~ map_dfr(
      .x, 
      ~ wildrtrax::wt_download_report(
          project_id = .x,
          sensor_id = "ARU",
          weather_cols = TRUE,
          reports = "main"
        )
    ) |> mutate(data_type = .y, .after = organization) 
)

# Mountain Pine Beetle
mpb <- wildrtrax::wt_download_report(project_id = 2129, sensor_id = "ARU", weather_cols = TRUE, reports = "main")

# Bind legacy data with acoustic data
janp_main <- bind_rows(old_s, janp_aru) |>
  group_by(location) |>
  fill(ecoregion, .direction = "down") |>
  ungroup() |>
  mutate(year = year(recording_date_time)) # Get year in as a variable

```

# Abstract

::: {.callout-note collapse="true" style="background-color: #f4f4f4; padding: 20px;"}
This report is dynamically generated, meaning its results may evolve with the addition of new data or further analyses. For the most recent updates, refer to the publication date and feel free to reach out to the authors.
:::

# Land Acknowledgement

We respectfully acknowledge that Jasper National Park is located in Treaty 6 and 8 as well as the traditional lands of the Anishinabe, Aseniwuche Winewak, Dene-zaa, Nêhiyawak, Secwépemc, Stoney Nakoda, Mountain Métis and Métis. We acknowledge the past, present, and future generations of these nations who continue to steward the land.

# Introduction

Human activities have been identified as key pressures and contributors to the global decline in forest wildlife (@allan2017recent). The repercussions of habitat fragmentation (@fahrig2003effects) and loss (@hanski2011habitat), climate change (@mantyka2012interactions, @sattar2021review, @abrahms2023climate), and increased access to sensitive areas exert direct and indirect pressures on forest biodiversity, particularly in managed regions in Canada (@lemieux2011state). Wildfire activity has significantly impacted montane bird monitoring in Jasper National Park. Two of the park’s three long-term monitoring transects have been burned, while the third is undergoing wildfire risk reduction efforts. To ensure comprehensive ecological integrity reporting, an assessment is needed to determine whether additional transects should be established during this transition period.

In 2007, Jasper National Park initiated a program incorporating autonomous recording units (ARUs) for passive acoustic monitoring (PAM) of the Park's wildlife. ARUs are compact environmental sensors that are designed to passively record the environment (@aru-overview), capturing vocalizing species like birds and amphibians, which is growing in use across the globe (@lots-of-pam). This technology enables resource managers to conduct prolonged surveys with minimal human interference. The subsequent data collected by these units contribute valuable information to ecological integrity metrics such as species richness, diversity, occupancy, and trends over time. This data aids decision-making and management within the Park. Given the rapid and ease of accumulating data from these units, maintaining a high standard of data integrity is paramount to ensure future data interoperability and sharing. [WildTrax](https://www.wildtrax.ca) is an online platform developed by the [Alberta Biodiversity Monitoring Institute (**ABMI**)](https://abmi.ca) for users of environmental sensors to help addresses these big data challenges by providing solutions to standardize, harmonize, and share data.

The project will analyze Jasper’s bird point count data from 2007 to 2024, assessing trends in species and guild abundance while accounting for the clustering of survey points within transects. Separate analyses will be conducted for montane/sub-alpine and alpine ecoregions to align with Ecological Integrity reporting requirements, determing time-to-first-detection usability in analysis. To enhance accessibility and reproducibility, the findings will be presented in this online report with fully documented code, allowing future updates as data collection methods become standardized. Additionally, recommendations will be developed to refine data transcription priorities, improve annual reporting methods, and evaluate species guild classifications for long-term monitoring. The objectives of this report are to:

-   Describe the data management and processing procedures for the acoustic data collected from 2007 to 2024;
-   Comparing tagging methods on count species and individuals heard on recordings;
-   Define straightforward methods for evaluating species presence, species richness, and species occupancy over time at various locations;
-   Offer recommendations for ongoing monitoring approaches to contribute to the assessment of ecological integrity in forest ecosystems;
-   Facilitate data publication to the public, resource managers, academic institutions, and any other relevant agencies

# Methods

## Data collection

Songbird data is collected using autonomous recording units (ARUs), deployed by field staff to capture one 10-minute recording per point count annually. Surveys are scheduled consistently each breeding season in June and early July, starting at dawn. Technicians walk transects containing ten points, each spaced at least 300 m apart to prevent duplicate detections. At each site, the ARU is set up, and technicians move 10–20 m away to minimize disturbance, allowing at least 11 minutes of recording.

```{r}
#| echo: false
#| eval: true
#| warning: false
#| message: false
#| include: true
#| fig-align: center
#| fig-cap: Locations from Jasper National Park ARU Monitoring Program
#| label: fig-aru-monitoring-locations

janp_locs <- janp_main |>
  mutate(year = lubridate::year(recording_date_time)) |>
  select(location, latitude, longitude, year, ecoregion) |>
  drop_na(latitude) |>
  distinct() |>
  mutate(type = case_when(grepl('BAT',location) ~ "Bat", TRUE ~ "Bird")) |>
  sf::st_as_sf(coords = c("longitude","latitude"), crs = 4326)

locs_summary <- janp_locs |>
  st_drop_geometry() |>
  group_by(location, ecoregion, year) |>
  distinct() |>
  mutate(value = row_number()) |>
  ungroup() |>
  arrange(year) |>
  pivot_wider(names_from = year, values_from = value, values_fill = 0) |>
  rename('Location' = location)

janp_shp <- read_sf('assets/National_Parks_and_National_Park_Reserves_of_Canada_Legislative_Boundaries.shp') |>
  filter(grepl('JASPER',adminAreaN))
janp_shp <- st_transform(janp_shp, st_crs(janp_locs)) |> st_make_valid()

pal <- colorFactor(
  palette = "Set3", 
  domain = janp_locs$ecoregion
)

leaflet() %>%
  addTiles() %>%
  addPolygons(
    data = janp_shp,
    color = "black",
    weight = 1,
    fillOpacity = 0.4,
    popup = ~paste("Park:", adminAreaN)
  ) %>%
  addCircleMarkers(
    data = janp_locs,
    popup = ~paste("Location:", janp_locs$location, "<br>"),
    fillColor = ~pal(ecoregion),  
    fillOpacity = 1,
    color = "black", 
    radius = 6 
  ) %>%
  addLegend(
    "topright",
    pal = pal,
    values = janp_locs$ecoregion,
    title = "Ecoregion",
    opacity = 1
  ) %>%
  addMeasure(primaryLengthUnit = "meters", primaryAreaUnit = "sqmeters") %>%
  addMiniMap(position = "bottomleft")


```
```{r}
#| warning: false
#| echo: true
#| eval: true
#| message: false
#| include: true
#| label: tbl-loc-summary
#| collapse: true
#| code-fold: true
#| tbl-cap: Locations surveyed across years. Ones indicated a deployment in that year for that location.

datatable(locs_summary, 
          options = list(
            searching = TRUE,  
            paging = TRUE,    
            pageLength = 10   
          )) |>
  formatStyle(columns = colnames(locs_summary), 
              backgroundColor = styleEqual(c("NA"), "lightgray"))  
```

## Location correlation

To assess whether bird survey locations in Jasper National Park can be treated as independent, we evaluated spatial connectivity using a distance-based neighbor analysis implemented with the `sf` and `spdep` R packages. Locations were classified based on their ecoregion, with a threshold of 500 m for alpine sites and 300 m for all other ecoregions. Using the `dnearneigh()` function from `spdep`, we identified spatial relationships between survey points within these thresholds. We then calculated the number of connected locations for each point and determined the percentage of isolated locations with no neighbors. The distribution of connections was summarized to assess spatial clustering, providing insight into whether survey sites should be modeled as independent or if spatial autocorrelation should be accounted for in further analysis.

```{r}
#| warning: false
#| echo: false
#| message: false
#| eval: false
#| include: false
#| code-fold: true

janp_locs_sf <- janp_locs %>%
  distinct(location, ecoregion, geometry) %>%  # Ensure unique locations
  st_as_sf()

create_neighbors <- function(locations_sf, threshold) {
  dnearneigh(st_geometry(locations_sf), 0, threshold)
}

janp_locs_sf <- janp_locs_sf %>%
  mutate(
    distance_threshold = ifelse(ecoregion == "Alpine", 500, 300),
    neighbors = map2(geometry, distance_threshold, 
                     ~ create_neighbors(janp_locs_sf, .y))
  )

neighbor_counts <- map_int(janp_locs_sf$neighbors, ~ length(.x))

summary(neighbor_counts)  # Summary of connections

# Percentage of locations with no connections
sum(neighbor_counts == 0) / length(neighbor_counts) * 100

```

```{r}
#| warning: false
#| echo: false
#| message: false
#| eval: false
#| include: false
#| label: tbl-loc-distances
#| tbl-cap: Locations distances


jj <- wt_location_distances(janp_main) |> filter(location_from %in% multiaru, distance < 300) |> inner_join(janp_main |> select(location, ecoregion) |> distinct(), by = c("location_from" = "location"))
```


## Data quality control

Before adopting WildTrax, analysts excluded the initial 20 seconds to 1.5 minutes of recordings to reduce human impact on detection probability, then logged the first detection time per species. Recordings are now uploaded as clean 10-minute files with the initial noise removed. Transcription methods varied over time @tbl-transcriptions, affecting data consistency. To ensure comparability, abundance analyses used the maximum value of each species which made estimated trend consistent across years. We used generalized linear mixed models for time-to-first detection and the differences it posed across years to account for detection probability differences. We also verified tags @tbl-verified and accounted for "too many to tag" individual (see @tbl-tmtt).

```{r}
#| warning: false
#| echo: true
#| eval: true
#| message: false
#| include: true
#| label: tbl-transcriptions
#| collapse: true
#| code-fold: true
#| tbl-cap: Transcription method by year with re-transcribed data being conducted from 2007 - 2012.

# Create the data frame
transcription_table <- tibble(
  Years = c("2007-2020", "2021-2022", "2023-2024", "2011"),
  `Transcription Method` = c(
    "0-3.33, 3.33-6.66, 6.66-10 min",
    "1 SPT - Species per task or recording (Every new individual is tagged within the 600s recording).",
    "1 SPT - Species per task or recording (Every new individual is tagged within the 600s recording).",
    "1 SPT - Species per task or recording (Every new individual is tagged within the 600s recording)."
  ),
  `Bin Method` = c(
    "Abundance re-starts for each 3.33-minute bin",
    "Unbinned on WildTrax* (Forced into bins for analysis)",
    "Unbinned on WildTrax* (Forced into bins for analysis)",
    "Unbinned on WildTrax*"
  ),
  `Method Details` = c(
    "No cap on abundance; abundance re-starts for each bin, no total abundance for the 10-min recording",
    "Counts per bin include only new individuals detected; individuals not re-counted across bins",
    "Counts per bin include only new individuals detected; individuals not re-counted across bins",
    "No cap on abundance"
  ),
  `Max Species` = c(
    "No cap",
    "Maximum of 3 individuals per 10-minute recording",
    "No cap",
    "No cap"
  )
)

# Render the datatable
datatable(transcription_table, 
          options = list(
            searching = TRUE,  
            paging = TRUE,    
            pageLength = 10   
          )) |>
  formatStyle(columns = colnames(transcription_table), 
              backgroundColor = styleEqual(c("NA"), "lightgray"))  


```

```{r}
#| warning: false
#| echo: false
#| message: false
#| eval: true
#| include: true
#| label: tbl-verified
#| tbl-cap: Proportion of tags verified

all_tags <- janp_main |>
  tally() |>
  pull()

verified_tags <- janp_main |>
  group_by(tag_is_verified) |>
  tally() |>
  ungroup() |>
  mutate(Proportion = round(n / all_tags,4)*100) |>
  rename("Count" = n) |>
  rename("Tag is verified" = tag_is_verified)

kable(verified_tags)

```

```{r}
#| warning: false
#| echo: false
#| message: false
#| eval: true
#| include: true
#| label: tbl-tmtt
#| tbl-cap: TMTT tags

tmtt_tags <- janp_main |>
  select(location, recording_date_time, species_code, individual_count) |>
  distinct() |>
  filter(individual_count == "TMTT")

kable(head(tmtt_tags))

```

## Analysis

To analyze trends in bird abundance in Jasper National Park from 2007–2024, we utilized bird point count data to assess changes in abundance at the species and guild levels. Observations were grouped by transects within the montane / sub-alpine and alpine ecoregions to address spatial clustering and ensure results aligned with Ecological Integrity reporting requirements. Point count data were first filtered to include only observations from 2007–2024. Each observation was classified by species and functional guild based on established ecological trait databases @tbl-guilds. The dataset was split by ecoregion (montane/sub-alpine and alpine) using georeferenced transect locations. A variable representing time-to-first-detection (TTFD) was included when available, to control for potential biases in detectability. Trends in abundance were assessed separately for species and guilds using generalized linear mixed-effects models (GLMMs) implemented in the lme4 package (Bates et al., 2015) in R (R Core Team, 2023). Count data were modeled using a Poisson distribution or a negative binomial distribution where overdispersion was evident. Models included fixed effects for year, ecoregion, and their interaction, while accounting for spatial clustering using random intercepts for transects. Separate models were fitted for montane/sub-alpine and alpine ecoregions to facilitate region-specific comparisons.

# Results

## Ecoregional analysis

A redundancy analysis (RDA) was conducted using the `vegan` R package to assess how species composition varies across ecoregions and locations. RDA is a constrained ordination method that allows us to examine relationships between community composition and explanatory variables while preserving the structure of the species abundance data. The response matrix (comm_matrix) contains species data with the first two columns removed to retain only species abundance information. The predictor variables, ecoregion and location, represent environmental and spatial gradients that may influence species distributions. By running the RDA, we can determine how much variation in community composition is explained by these factors and visualize species-environment relationships through ordination plots. @fig-community shows the relationship between species and ecoregion.

```{r}
#| warning: false
#| echo: false
#| message: false
#| eval: true
#| include: true
#| label: fig-community
#| tbl-cap: Community matrix

comm_matrix <- janp_main |>
  wt_tidy_species(remove = c("mammal","amphibian","abiotic","insect","unknown"), zerofill = T) |>
  wt_replace_tmtt(calc = "round") |>
  select(-ecoregion) |>
  inner_join(locs_summary, by = c("location" = "Location")) |>
  mutate(ecoregion = case_when(ecoregion %in% c("Alpine") ~ "Alpine",
                               ecoregion %in% c("Upper Subalpine","Lower Subalpine","Montane") ~ "Montane")) |>
  group_by(location, ecoregion, species_code) |>
  summarise(individual_order = max(individual_order)) |>
  ungroup() |>
  pivot_wider(names_from = species_code, values_from = individual_order, values_fill = 0) |>
  drop_na(ecoregion)

multi_type <- comm_matrix  %>%
  dplyr::select(location, ecoregion) %>%
  distinct() %>%
  drop_na()

t3 <- rda(comm_matrix[,-c(1:2)] ~ ecoregion + location, data = multi_type)
# Print the results of a permutation test for the constrained ordination
#ordi <- ordistep(t3)
# Set up the output - scores first
t3scores <- scores(t3, display = "sites") %>%
as.data.frame() %>%
rownames_to_column("site") %>%
bind_cols(., multi_type)
t3vect <- scores(t3, display = "species") %>%
as.data.frame()

plot_RDA <- ggplot(data = t3scores, aes(x = RDA1, y = RDA2)) +
  geom_point(data = t3scores, aes(x = RDA1, y = RDA2, colour = ecoregion), 
             alpha = 0.7, size = 3, shape = 16) +
  stat_ellipse(data = t3scores, aes(colour = ecoregion), 
               linetype = 1, type = 'norm', level = 0.67, size = 1) +
  geom_vline(xintercept = 0, color = "#A19E99", linetype = 2, size = 1) +
  geom_hline(yintercept = 0, color = "#A19E99", linetype = 2, size = 1) +
  geom_segment(data = t3vect, aes(x = 0, y = 0, xend = RDA1, yend = RDA2), 
               arrow = arrow(length = unit(0.2, "cm")), size = 0.3) +
  geom_text_repel(data = t3vect, aes(x = RDA1, y = RDA2, label = rownames(t3vect)), 
                  size = 3, colour = "black", fontface = "italic", 
                  max.overlaps = 10, 
                  segment.color = "grey70") +
  theme_bw() +
  scale_colour_viridis_d(option = "cividis", end = 0.9) +
  labs(x = "RDA1", y = "RDA2", title = "RDA Plot of Ecoregions and Species", 
       colour = "Ecoregion") +
  theme(legend.position = "right", 
        legend.title = element_text(size = 10), 
        legend.text = element_text(size = 9), 
        plot.title = element_text(hjust = 0.5, size = 14, face = "bold"))

plot_RDA

```

## Guild analysis

Here are the species guilds listed in @tbl-guilds, with activity patterns illustrated in @fig-spp-activity-nesting, @fig-spp-activity-dietary, and @fig-spp-activity-migratory, categorized by nesting, dietary, and migratory guilds. A notable pattern emerges across all three guilds of the proportion of tags detected being detected later in the alpine ecoregion compared to the montane ecoregion.

```{r}
#| warning: false
#| echo: true
#| eval: true
#| message: false
#| include: true
#| label: tbl-guilds
#| collapse: true
#| code-fold: true
#| tbl-cap: Guilds

guilds <- read_csv("jasper_guilds.csv")

datatable(guilds, 
          options = list(
            searching = TRUE,  
            paging = TRUE,    
            pageLength = 10   
          ))

```

```{r}
#| warning: false
#| echo: false
#| eval: true
#| message: false
#| include: true
#| results: hide
#| fig-align: center
#| fig-cap: Seasonal detection activity of by nesting guild and ecoregion
#| label: fig-spp-activity-nesting
#| cap-location: margin
#| code-fold: true

guild_activity <- janp_main |>
  filter(data_type %in% c("legacy","single_visit_3_max","single_visit_0_max")) |>
  filter(!(data_type == "single_visit_0_max" & year < 2023)) |>
  wt_tidy_species(remove = c("mammal","amphibian","abiotic","insect","unknown"), zerofill = T) |>
  select(location, recording_date_time, species_common_name, species_code, individual_count) |>
  mutate(julian = lubridate::yday(recording_date_time),
         month= month(recording_date_time),
         year = factor(year(recording_date_time))) |>
  inner_join(guilds, by = "species_code") |>
  group_by(species_code) |>
  add_tally() |>
  ungroup() |>
  rename("Nesting habitat" = habitat_guild) |>
  group_by(julian, species_code) |>
  add_tally() |>
  ungroup() |>
  arrange(species_code) |>
  mutate(recording_date_time = as.POSIXct(recording_date_time)) |>
  mutate(species_code = factor(species_code, levels = sort(unique(species_code)))) |>
  inner_join(locs_summary, by = c("location" = "Location")) |>
  mutate(ecoregion = case_when(ecoregion %in% c("Alpine") ~ "Alpine",
                               ecoregion %in% c("Upper Subalpine","Lower Subalpine","Montane") ~ "Montane"))

guild_activity |>
  ggplot(aes(x = julian, y = `Nesting habitat`, fill = `Nesting habitat`)) + 
  geom_density_ridges(alpha = 0.7) +
  scale_fill_viridis_d(option = "cividis") +
  facet_wrap(~ecoregion) +
  theme_bw() +
  xlab("Day of Year") + 
  ylab("Species")
```

```{r}
#| warning: false
#| echo: false
#| eval: true
#| message: false
#| include: true
#| results: hide
#| fig-align: center
#| fig-cap:  Seasonal detection activity of by nesting guild and ecoregion
#| label: fig-spp-activity-dietary
#| cap-location: margin
#| code-fold: true

guild_activity |>
  rename(`Dietary guild` = "dietary_guild") |>
  ggplot(aes(x = julian, y = `Dietary guild`, fill = `Dietary guild`)) + 
  geom_density_ridges(alpha = 0.7) +
  scale_fill_viridis_d(option = "cividis") +
  facet_wrap(~ecoregion) +
  theme_bw() +
  xlab("Day of Year") + 
  ylab("Species")

```

```{r}
#| warning: false
#| echo: false
#| eval: true
#| message: false
#| include: true
#| results: hide
#| fig-align: center
#| fig-cap:  Seasonal detection activity of by migratory guild and ecoregion
#| label: fig-spp-activity-migratory
#| cap-location: margin
#| code-fold: true

guild_activity |>
  mutate(migratory_guild = case_when(migratory_guild == "Winter residents" ~ "Winter resident",
                                     migratory_guild == "Short-distance migrants" ~ "Short-distance migrant",
                                     migratory_guild == "Long-distance migrants" ~ "Long-distance migrant",
                                     TRUE ~ migratory_guild)) |>
  rename(`Migratory guild` = "migratory_guild") |>
  ggplot(aes(x = julian, y = `Migratory guild`, fill = `Migratory guild`)) + 
  geom_density_ridges(alpha = 0.7) +
  scale_fill_viridis_d(option = "cividis") +
  facet_wrap(~ecoregion) +
  theme_bw() +
  xlab("Day of Year") + 
  ylab("Species")

```

## Abundance trend analysis

The trend in species abundance is summarized in @fig-normalized-count-mdm-year.

```{r}
#| warning: false
#| echo: false
#| eval: true
#| message: false
#| include: true
#| results: hide
#| fig-align: center
#| fig-width: 8
#| fig-height: 8
#| fig-cap: Normalized count abundance of mean number of medium-distance migrants by year
#| label: fig-normalized-count-mdm-year
#| cap-location: margin

z <- locs_summary |>
  rowwise() |>
  mutate(sum = sum(across(`2007`:`2024`))) |>
  filter(sum == 17)

# Medium-distance migrants
mdm <- c("AMRO","BRSP","CHSP","DEJU","GCKI","HETH","FOSP","OCWA","RCKI","SWTH","VATH","WAVI","WCSP","WTSP","GCSP","YRWA")

tot_a <- janp_main |>
  filter(data_type %in% c("legacy","single_visit_3_max","single_visit_0_max")) |>
  filter(!(data_type == "single_visit_0_max" & year < 2023)) |>
  wt_tidy_species(remove = c("mammal","amphibian","abiotic","insect","unknown"), zerofill = F)

prop_tidy <- nrow(tot_a) / nrow(janp_main)

tot_a_mdm <- tot_a |>
  filter(species_code %in% mdm)

prop_a <- nrow(tot_a_mdm) / nrow(tot_a)

plot_mdm <- 
  tot_a_mdm |>
  mutate(year = year(recording_date_time)) |>
  select(location, data_type, year, species_code, individual_order, individual_count) |>
  group_by(location, data_type, year, species_code) |>
  summarise(individual_order = mean(individual_order)) |>
  ungroup() |>
  mutate(year = round(year,0)) |>
  group_by(year, data_type, species_code) |>
  summarise(
    total_abundance = sum(individual_order),  
    sample_size = n_distinct(location)
  ) |>
  ungroup() |>
  mutate(normalized_count = total_abundance / sample_size)

plot_mdm |>
  ggplot(aes(x = year, y = normalized_count, colour = species_code)) +
  geom_point() + 
  geom_smooth(aes(x = as.numeric(as.character(year))), method = "lm") + 
  scale_colour_viridis_d(option = "cividis", alpha = 0.7) +
  theme_bw() +
  facet_wrap(~species_code) +
  labs(x = "Year", y = "Normalized count of mean number of individuals per location")

```

```{r}
#| warning: false
#| echo: true
#| eval: true
#| message: false
#| include: true
#| label: tbl-normalized-count-mdm-year
#| collapse: true
#| code-fold: true
#| tbl-cap: Linear models of species trends using normalized mean count per location

datatable(
  plot_mdm |>
    group_by(species_code) |>
    summarise(models = list(
      lm(normalized_count ~ year + data_type, data = cur_data())
    )) |>
    mutate(model_summary = map(models, tidy)) |>
    unnest(model_summary) |>
    select(-models) |>
    mutate(across(where(is.numeric), round, 2)),
  options = list(
    searching = TRUE,
    paging = TRUE,
    pageLength = 10
  )
)

```

```{r}
#| warning: false
#| echo: true
#| eval: true
#| message: false
#| include: true
#| results: hide
#| fig-align: center
#| fig-cap: Annual count of medium-distance migrants 
#| label: fig-annual-count
#| cap-location: bottom
#| code-fold: true

count_annual_mdm <- tot_a_mdm |>
  mutate(ecoregion = case_when(ecoregion %in% c("Alpine") ~ "Alpine",
                               ecoregion %in% c("Upper Subalpine","Lower Subalpine","Montane") ~ "Montane")) |>
  mutate(year = year(recording_date_time)) |>
  select(location, ecoregion, year, species_code, individual_order, individual_count) |>
  group_by(location, ecoregion, year, species_code) |>
  summarise(individual_order = max(individual_order)) |>
  ungroup() |>
  mutate(year = round(year, 0)) |>
  group_by(ecoregion, year) |>
  summarise(sum_year = sum(individual_order), 
            sample_size = n()) |>
  ungroup() |>
  mutate(normalized_count = sum_year / sample_size)

# Linear model with normalized counts
linear_model_count_annual_mdm <- lm(normalized_count ~ year + ecoregion, data = count_annual_mdm)
slope_count_annual_mdm <- coef(linear_model_count_annual_mdm)[2]
p_value_count_annual_mdm <- summary(linear_model_count_annual_mdm)$coefficients[2, 4]

# Plot with normalized counts
ggplot(count_annual_mdm, aes(x = year, y = normalized_count, colour = ecoregion)) +
  geom_smooth(method = "lm") +
  geom_point(size = 2) +
  scale_colour_viridis_d(option = "cividis") +
  labs(x = "Year", y = "Normalized Count of Medium-Distance Migrants", fill = "Ecoregion") +
  scale_x_continuous(breaks = unique(count_annual_mdm$year)) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  annotate("text", x = 2008, y = max(count_annual_mdm$normalized_count), 
           label = paste("Slope: ", round(slope_count_annual_mdm, 2), "\nP-value: ", round(p_value_count_annual_mdm, 4)), 
           size = 3, hjust = 0, vjust = 1)

```

The mean time to first detection was stable throughout the years and methods used (see @fig-mean-time-ttfd)

```{r}
#| warning: false
#| echo: true
#| eval: true
#| message: false
#| include: true
#| results: hide
#| fig-align: center
#| fig-cap: Mean time of first detection across years
#| label: fig-mean-time-ttfd
#| cap-location: bottom
#| code-fold: true

mean_ttfd <- janp_main |>
  filter(data_type %in% c("legacy","single_visit_3_max","single_visit_0_max")) |>
  filter(!(data_type == "single_visit_0_max" & year < 2023)) |>
  group_by(year, location, data_type, species_code) |>
  summarise(mean_detection = mean(detection_time, na.rm = TRUE)) |>
  ungroup() |>
  mutate(mean_detection_log = log(mean_ttfd$mean_detection + 1))

# mean_ttfd |>
#   ggplot(aes(x = factor(year), y = mean_detection, fill = factor(year))) +  # Convert year to factor
#   geom_boxplot() +
#   theme_bw() +
#   xlab("Year") + ylab("Mean time of first detection") +
#   scale_fill_viridis_d(option = "cividis")

# ggplot(mean_ttfd, aes(x = factor(year), y = mean_detection, fill = data_type)) +
#   geom_boxplot() +
#   facet_wrap(~ data_type) +
#   theme_bw() +
#   xlab("Year") + ylab("Mean time to first detection") +
#   scale_fill_viridis_d(option = "cividis")

mean_ttfd_model_mixed <- lmer(mean_detection ~ year + data_type + (1 | species_code) + (1 | location), data = mean_ttfd)
reduced_model_log <- lmer(mean_detection_log ~ data_type + (1 | species_code) + (1 | location), data = mean_ttfd)
model_ttfd_anova <- anova(mean_ttfd_model_mixed, reduced_model)
p_ttfd <- model_ttfd_anova$`Pr(>Chisq)`[2]

# glmm_nb <- glmer.nb(mean_detection ~ data_type + (1 | species_code) + (1 | location), data = mean_ttfd)
# fixed_effects <- fixef(glmm_nb)

 prediction_data <- data.frame(
  data_type = c("legacy", "single_visit_0_max", "single_visit_3_max")
)

# Calculate predicted mean_detection values
prediction_data <- prediction_data %>%
  mutate(predicted_mean_detection = exp(fixed_effects[1] + 
                                          case_when(
                                            data_type == "legacy" ~ 0,
                                            data_type == "single_visit_0_max" ~ fixed_effects["data_typesingle_visit_0_max"],
                                            data_type == "single_visit_3_max" ~ fixed_effects["data_typesingle_visit_3_max"]
                                          )))

# Plot the predicted values
ggplot(prediction_data, aes(x = data_type, y = predicted_mean_detection, fill = data_type)) +
  geom_bar(stat = "identity", color = "black") +
  theme_bw() +
  xlab("Data Type") +
  ylab("Predicted Mean Detection Time") +
  scale_fill_viridis_d(option = "cividis") +
  ggtitle("Predicted Mean Detection Time by Data Type")

# preds <- ggpredict(reduced_model, terms = c("data_type"))
# ggplot(preds, aes(x = x, y = predicted, color = group)) +
#   geom_line() +
#   geom_point() +
#   theme_minimal() +
#   labs(x = "Year", y = "Predicted mean detection time", color = "Data Type")
# emmeans_reduced <- emmeans(reduced_model_log, pairwise ~ data_type)
# plot(emmeans_reduced$emmeans)
# qqnorm(residuals(reduced_model_log))
# qqline(residuals(reduced_model_log))

```

## Species richness and diversity trends

Species richness per location is at @fig-spp-rich-locs and Shannon's diversity index over years at @fig-shannon.

```{r}
#| warning: false
#| message: false
#| echo: true
#| eval: true
#| include: true
#| fig-align: center
#| fig-cap: Species richness by year
#| label: fig-spp-rich-locs
#| cap-location: bottom
#| code-fold: true

spp_rich_location <- janp_main |>
  filter(data_type %in% c("legacy","single_visit_3_max","single_visit_0_max")) |>
  filter(!(data_type == "single_visit_0_max" & year < 2023)) |>
  wt_tidy_species(remove = c("mammal","amphibian","abiotic","insect","unknown"), zerofill = F) |>
  select(location, year, species_code) |>
  distinct() |>
  group_by(location, year) |>
  summarise(species_count = n_distinct(species_code)) |>
  ungroup() |>
  inner_join(locs_summary, by = c("location" = "Location")) |>
  mutate(ecoregion = case_when(ecoregion %in% c("Alpine") ~ "Alpine",
                               ecoregion %in% c("Upper Subalpine","Lower Subalpine","Montane") ~ "Montane"))

spp_rich_location |>
  ggplot(aes(x=as.factor(year), y=species_count, fill=year)) +
  geom_boxplot() +
  geom_point(alpha = 0.7, colour = "grey") +
  geom_smooth(method = "lm") +
  theme_bw() +
  facet_wrap(~ecoregion) +
  scale_fill_viridis_c(option = "cividis") +
  xlab('Year') + ylab('Species richness per location') +
  coord_flip()

```

```{r}
#| warning: false
#| echo: true
#| eval: true
#| message: false
#| include: true
#| results: hide
#| fig-align: center
#| fig-cap: Shannon diversity index over years
#| label: fig-shannon
#| cap-location: bottom
#| code-fold: true

shannon_d <- janp_main |> 
  wt_tidy_species(remove = c("mammal","amphibian","abiotic","insect","unknown"), zerofill = F) |>
  inner_join(wt_get_species() |> select(species_code, species_class, species_order), by = "species_code") |>
  select(location, recording_date_time, species_code, species_common_name, individual_order, individual_count) |>
  distinct() |>
  group_by(location, recording_date_time, species_code, species_common_name) |>
  summarise(count = max(individual_order)) |>
  ungroup() |>
  pivot_wider(names_from = species_code, values_from = count, values_fill = 0) |>
  pivot_longer(cols = -(location:species_common_name), names_to = "species", values_to = "count") |>
  group_by(location, year = year(recording_date_time), species) |>
  summarise(total_count = sum(count)) |>
  ungroup() |>
  group_by(location, year) |>
  summarise(shannon_index = diversity(total_count, index = "shannon")) |>
  ungroup() |>
  ggplot(aes(x = factor(year), y = shannon_index, fill = factor(year))) +
  geom_boxplot() +
  geom_point(alpha = 0.6, colour = "grey") +
  labs(x = "Year",
       y = "Shannon diversity index per location") +
  theme_bw() +
  guides(fill = guide_legend(title = "Year")) +
  scale_fill_viridis_d(alpha = 0.8, option = "cividis")

shannon_d
```


# Discussion


